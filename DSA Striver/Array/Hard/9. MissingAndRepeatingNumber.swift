//
//  9. MissingAndRepeatingNumber.swift
//  DSA Striver
//
//  Created by Arun on 28/04/25.
//

//: [Previous](@previous)

// Question Link: https://www.naukri.com/code360/problems/missing-and-repeating-numbers_6828164
// Article Link: https://takeuforward.org/data-structure/find-the-repeating-and-missing-numbers/

// TC -> O(n * n)
public func findMissingRepeatingNumbersBrute(arr: [Int]) -> [Int] {
    let n = arr.count
    
    var result = [Int](repeating: -1, count: 2)
    result.reserveCapacity(2)
    
    for i in 1...n {
        var count = 0
        for ele in arr where i == ele {
            count += 1
            if count == 2 {
                result[0] = i
                break
            }
        }
        
        if count == 0 {
            result[1] = i
        }
    }
    return result
}

//let arr = [1, 2, 3, 2]
//let arr = [5, 1, 2, 4, 3, 7, 5]
//let arr = [8, 4, 1, 6, 7, 2, 5, 8]
//let result = findMissingRepeatingNumbersBrute(arr: arr)
//print(result)

// TC -> O(2n)
// SC -> O(n)
public func findMissingRepeatingBetter(arr: [Int]) -> [Int] {
    let n = arr.count
    
    var hashArray = [Int](repeating: 0, count: n)
    hashArray.reserveCapacity(n)
    
    var result = [Int](repeating: -1, count: 2)
    result.reserveCapacity(2)
    
    for ele in arr {
        hashArray[ele - 1] += 1
    }
    
    for i in hashArray.indices {
        
        if hashArray[i] == 2 {
            result[0] = i + 1
        }
        else if hashArray[i] == 0 {
            result[1] = i + 1
            
        }
    }
    
    return result
}

//let arr = [1, 2, 3, 2]
//let arr = [5, 1, 2, 4, 3, 7, 5]
//let arr = [8, 4, 1, 6, 7, 2, 5, 8]
//let result = findMissingRepeatingBetter(arr: arr)
//print(result)


/*
 Sum of first Squares of natural numbers => n * (n+1) * (2n+1) / 6
 */
public func findMissingRepeatingOptimal(arr: [Int]) -> [Int] {
    let n = arr.count
    
    var sum1 = 0
    var squareSum1 = 0
    
    for ele in arr {
        sum1 += ele
        squareSum1 += ele * ele
    }
    
    let sum2 = (n * (n + 1)) / 2
    let squareSum2 = (n * (n + 1) * (2 * n + 1)) / 6
    
    let diff1 = sum1 - sum2
    let diff2 = squareSum1 - squareSum2
    
    let refinedDiff2 = diff2 / diff1
    
    let repeatingNumber = (diff1 + refinedDiff2) / 2
    let missingNumber = refinedDiff2 - repeatingNumber
    
    return [repeatingNumber, missingNumber]
}
  
//let arr = [1, 2, 3, 2]
//let arr = [5, 1, 2, 4, 3, 7, 5]
//let arr = [8, 4, 1, 6, 7, 2, 5, 8]
//let arr = [996, 491, 709, 552, 720, 835, 630, 233, 667, 918, 534, 777, 207, 1151, 945, 946, 860, 595, 44, 55, 386, 900, 287, 616, 298, 254, 514, 781, 193, 238, 1136, 1019, 183, 136, 596, 570, 337, 531, 731, 249, 1127, 489, 1095, 576, 365, 995, 809, 619, 1116, 62, 848, 745, 231, 154, 1024, 506, 988, 272, 639, 695, 1018, 515, 1100, 957, 1125, 291, 96, 660, 723, 844, 910, 547, 812, 1165, 1009, 1055, 518, 715, 421, 1037, 296, 522, 185, 730, 1170, 1101, 1041, 536, 1149, 743, 281, 771, 605, 729, 641, 1132, 546, 1098, 7, 302, 682, 602, 176, 126, 937, 331, 947, 683, 440, 149, 701, 553, 391, 130, 334, 622, 665, 360, 608, 1065, 700, 721, 791, 1088, 397, 736, 280, 950, 735, 40, 426, 369, 574, 794, 754, 612, 189, 806, 614, 832, 510, 497, 584, 322, 171, 871, 573, 409, 984, 864, 685, 1025, 638, 385, 330, 951, 243, 833, 145, 647, 236, 980, 1123, 796, 963, 713, 118, 325, 292, 8, 677, 380, 158, 246, 1020, 586, 230, 1111, 593, 111, 90, 919, 240, 452, 1108, 288, 521, 859, 471, 262, 678, 86, 1146, 733, 669, 434, 59, 47, 80, 973, 480, 636, 1039, 1164, 324, 763, 157, 1163, 623, 1105, 464, 1000, 525, 640, 990, 926, 35, 135, 916, 834, 436, 133, 504, 195, 373, 412, 147, 807, 152, 1102, 1010, 1063, 537, 282, 888, 367, 377, 724, 127, 50, 1119, 46, 188, 1115, 993, 186, 455, 758, 1029, 124, 1006, 216, 114, 128, 797, 501, 987, 496, 1069, 954, 673, 542, 628, 830, 26, 753, 611, 321, 456, 1048, 483, 865, 143, 1056, 463, 48, 414, 410, 1051, 592, 925, 150, 273, 220, 588, 881, 403, 1099, 476, 554, 651, 65, 811, 837, 38, 985, 761, 446, 1118, 1092, 108, 610, 719, 935, 5, 89, 1152, 1153, 338, 966, 1053, 453, 780, 378, 1040, 1070, 4, 1043, 786, 1139, 219, 962, 604, 693, 376, 211, 182, 1014, 93, 529, 1145, 846, 399, 91, 299, 364, 535, 418, 226, 591, 357, 1016, 1085, 697, 61, 336, 579, 81, 264, 312, 808, 425, 99, 989, 54, 13, 165, 1093, 875, 631, 1128, 1049, 548, 598, 541, 1, 776, 166, 904, 241, 643, 1052, 590, 82, 206, 1180, 459, 872, 747, 924, 779, 259, 462, 755, 1104, 952, 869, 817, 253, 922, 221, 119, 998, 625, 1159, 996, 202, 702, 481, 383, 823, 560, 533, 874, 346, 923, 42, 557, 991, 164, 765, 41, 194, 1124, 342, 349, 589, 816, 892, 53, 161, 201, 101, 650, 285, 431, 663, 423, 841, 416, 1017, 1080, 975, 909, 362, 14, 428, 105, 213, 1066, 905, 1096, 1030, 484, 23, 1058, 802, 256, 956, 430, 24, 519, 141, 671, 948, 73, 741, 528, 1073, 197, 361, 395, 123, 359, 153, 274, 465, 906, 217, 524, 200, 737, 125, 839, 520, 1013, 694, 690, 795, 847, 751, 1109, 30, 718, 290, 679, 929, 341, 668, 1154, 853, 920, 609, 813, 277, 470, 401, 1134, 21, 512, 20, 569, 366, 1169, 469, 474, 675, 1050, 100, 772, 526, 350, 363, 265, 773, 889, 43, 502, 370, 676, 451, 544, 936, 704, 550, 429, 949, 33, 411, 172, 734, 822, 933, 1078, 314, 637, 179, 115, 196, 477, 144, 971, 539, 51, 902, 146, 485, 64, 1126, 1047, 958, 475, 517, 681, 1064, 1135, 112, 271, 831, 921, 173, 955, 142, 997, 861, 826, 850, 88, 424, 76, 852, 1162, 1094, 1175, 613, 284, 57, 564, 939, 102, 390, 294, 974, 1011, 1044, 138, 339, 402, 215, 443, 267, 235, 162, 439, 159, 371, 191, 1005, 527, 405, 120, 686, 1143, 824, 815, 516, 482, 268, 11, 843, 1107, 680, 1097, 184, 1082, 163, 60, 1022, 348, 890, 766, 218, 1012, 1007, 37, 787, 449, 792, 1150, 857, 884, 98, 303, 572, 306, 121, 784, 309, 790, 382, 16, 229, 66, 441, 413, 666, 317, 941, 642, 873, 168, 1054, 897, 649, 457, 283, 543, 151, 931, 600, 627, 717, 250, 1038, 775, 999, 12, 551, 347, 711, 978, 855, 577, 228, 467, 224, 406, 1067, 279, 1076, 258, 1079, 882, 36, 818, 943, 1031, 762, 508, 131, 313, 87, 393, 107, 894, 976, 768, 499, 670, 1167, 389, 278, 858, 917, 878, 404, 438, 177, 289, 223, 684, 732, 746, 664, 1003, 445, 594, 328, 582, 662, 644, 633, 340, 606, 239, 944, 379, 876, 1141, 885, 1083, 103, 756, 1087, 495, 712, 170, 722, 326, 1086, 227, 18, 1131, 759, 707, 964, 986, 764, 104, 714, 632, 1081, 842, 381, 1015, 1034, 645, 192, 293, 828, 447, 160, 58, 710, 304, 97, 629, 444, 827, 601, 205, 513, 749, 109, 1021, 1160, 368, 849, 92, 653, 563, 538, 427, 203, 898, 286, 155, 617, 788, 1122, 740, 343, 1072, 28, 532, 487, 930, 757, 117, 478, 880, 1148, 305, 587, 1129, 450, 209, 25, 94, 408, 297, 70, 1133, 295, 1114, 927, 71, 116, 353, 559, 503, 942, 198, 1023, 716, 68, 863, 767, 106, 992, 169, 819, 913, 45, 748, 659, 78, 509, 1176, 1091, 854, 234, 928, 583, 472, 214, 688, 77, 1144, 726, 706, 977, 1155, 139, 156, 15, 742, 1177, 805, 400, 257, 1008, 580, 968, 174, 468, 738, 893, 901, 212, 244, 1090, 49, 803, 1121, 804, 300, 327, 372, 868, 793, 886, 698, 615, 1062, 113, 1156, 540, 969, 1157, 575, 175, 571, 1059, 307, 657, 204, 32, 387, 656, 466, 1158, 856, 1138, 320, 820, 940, 31, 825, 599, 1103, 492, 358, 237, 1057, 210, 1077, 810, 222, 67, 245, 442, 566, 565, 247, 899, 1174, 63, 708, 661, 891, 691, 1060, 845, 965, 394, 829, 351, 178, 354, 1142, 1071, 29, 69, 581, 316, 225, 1046, 1033, 344, 785, 260, 1026, 270, 687, 1028, 422, 148, 355, 1172, 6, 814, 728, 190, 585, 1036, 883, 689, 530, 696, 635, 261, 454, 140, 84, 507, 1140, 22, 699, 479, 396, 407, 72, 75, 840, 915, 895, 851, 1173, 432, 618, 1002, 903, 137, 982, 388, 384, 19, 912, 877, 769, 263, 1061, 1112, 34, 3, 727, 972, 301, 549, 620, 473, 523, 646, 2, 85, 778, 545, 1178, 914, 981, 269, 1117, 1075, 561, 1032, 10, 907, 658, 500, 1045, 242, 1179, 95, 750, 1147, 1166, 420, 652, 134, 329, 1110, 486, 870, 970, 1113, 959, 345, 1106, 83, 578, 199, 275, 1168, 838, 417, 597, 1089, 490, 908, 248, 435, 634, 332, 624, 356, 419, 1001, 648, 967, 74, 276, 866, 498, 129, 568, 983, 567, 56, 461, 556, 801, 433, 27, 1068, 798, 782, 911, 1035, 654, 398, 621, 1130, 167, 315, 180, 783, 448, 821, 938, 800, 799, 318, 674, 953, 774, 744, 375, 17, 79, 1042, 208, 789, 266, 994, 374, 932, 488, 739, 251, 1137, 511, 493, 352, 960, 555, 979, 1171, 705, 934, 626, 672, 1161, 1027, 9, 760, 460, 52, 392, 319, 39, 887, 311, 308, 896, 1120, 310, 692, 961, 703, 505, 415, 110, 252, 879, 603, 655, 752, 1074, 562, 1004, 458, 770, 558, 132, 255, 862, 187, 1084, 836, 232, 725, 607, 333, 181, 335, 867, 122, 437, 494]
//let result = findMissingRepeatingOptimal(arr: arr)
//print(result)

